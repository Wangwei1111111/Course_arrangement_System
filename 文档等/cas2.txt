from ortools.sat.python import cp_model

# 定义数据
students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
teachers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
subjects = ["语文", "化学", "英语", "物理", "数学"]
student_teacher_subject = [
    (1, 2, "语文"),
    (15, 2, "语文"),
    (9, 3, "语文"),
    (14, 4, "化学"),
    (11, 4, "化学"),
    (12, 4, "化学"),
    (10, 5, "化学"),
    (22, 5, "化学"),
    (17, 6, "化学"),
    (18, 6, "化学"),
    (7, 6, "化学"),
    (2, 6, "化学"),
    (14, 7, "英语"),
    (3, 7, "英语"),
    (19, 7, "英语"),
    (11, 8, "英语"),
    (10, 8, "英语"),
    (18, 8, "英语"),
    (1, 8, "英语"),
    (16, 8, "英语"),
    (16, 9, "物理"),
    (15, 9, "物理"),
    (10, 9, "物理"),
    (17, 9, "物理"),
    (18, 10, "物理"),
    (19, 10, "物理"),
    (9, 10, "物理"),
    (10, 11, "物理"),
    (14, 11, "物理"),
    (8, 12, "物理"),
    (17, 12, "物理"),
    (2, 12, "物理"),
    (22, 13, "物理"),
    (13, 13, "物理"),
    (7, 13, "物理"),
    (16, 14, "数学"),
    (4, 14, "数学"),
    (19, 14, "数学"),
    (6, 14, "数学"),
    (22, 15, "数学"),
    (3, 15, "数学"),
    (9, 15, "数学"),
    (15, 15, "数学"),
    (2, 16, "数学"),
    (12, 16, "数学"),
    (23, 16, "数学"),
    (21, 17, "数学"),
    (17, 17, "数学"),
    (14, 17, "数学"),
    (12, 19, "物理"),
    (18, 20, "数学"),
]

num_days = 1
max_classes_per_day = 6

# 初始化 CP-SAT 模型
model = cp_model.CpModel()

# 创建变量
schedule = {}
for student in students:
    for teacher in teachers:
        for subject in subjects:
            for day in range(num_days):
                for class_num in range(max_classes_per_day):
                    var_name = f"s{student}_t{teacher}_{subject}_d{day}_c{class_num}"
                    schedule[var_name] = model.NewBoolVar(var_name)

# 添加约束条件
for student, teacher, subject in student_teacher_subject:
    for day in range(num_days):
        subject_classes = [
            schedule[f"s{student}_t{teacher}_{subject}_d{day}_c{class_num}"]
            for class_num in range(max_classes_per_day)
        ]
        model.Add(sum(subject_classes) >= 1)

# 学生每天最多上6节课
for student in students:
    for day in range(num_days):
        student_classes = [
            schedule[f"s{student}_t{teacher}_{subject}_d{day}_c{class_num}"]
            for teacher in teachers
            for subject in subjects
            for class_num in range(max_classes_per_day)
        ]
        model.Add(sum(student_classes) <= 6)

# 老师每天最多上6节课
for teacher in teachers:
    for day in range(num_days):
        teacher_classes = [
            schedule[f"s{student}_t{teacher}_{subject}_d{day}_c{class_num}"]
            for student in students
            for subject in subjects
            for class_num in range(max_classes_per_day)
        ]
        model.Add(sum(teacher_classes) <= 6)

# 在一个时间段内，学生只能上一门课程
for student in students:
    for day in range(num_days):
        for class_num in range(max_classes_per_day):
            student_classes = [
                schedule[f"s{student}_t{teacher}_{subject}_d{day}_c{class_num}"]
                for teacher in teachers
                for subject in subjects
            ]
            model.Add(sum(student_classes) <= 1)

# 在一个时间段内，老师只能教一门课程
for teacher in teachers:
    for day in range(num_days):
        for class_num in range(max_classes_per_day):
            teacher_classes = [
                schedule[f"s{student}_t{teacher}_{subject}_d{day}_c{class_num}"]
                for student in students
                for subject in subjects
            ]
            model.Add(sum(teacher_classes) <= 1)

# 求解模型
solver = cp_model.CpSolver()
status = solver.Solve(model)

# 输出结果
if status == cp_model.OPTIMAL:
    for day in range(num_days):
        print(f"Day {day + 1}:")
        for class_num in range(max_classes_per_day):
            print("第{}节课".format(class_num+1))
            for student in students:
                for teacher in teachers:
                    for subject in subjects:
                        var_name = f"s{student}_t{teacher}_{subject}_d{day}_c{class_num}"
                        if solver.Value(schedule[var_name]) == 1:
                            print(f"  学生{student} 跟 老师{teacher} 上 {subject} 课")
else:
    print("没有找到解决方案")
